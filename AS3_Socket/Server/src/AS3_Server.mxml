<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="299" height="220" minWidth="11" minHeight="11"
			   closing="windowedapplication1_closingHandler(event)"
			   >
	
	<fx:Script>
		<![CDATA[
			import com.google.protobuf.Message;
			
			import global.util.CustomerByteArray;
			
			private var socket:ServerSocket;
			
			private function windowedapplication1_closingHandler(event:Event):void {
				if(socket){
					socket.close();
				}
			}
			
			private function button1_clickHandler(event:MouseEvent):void
			{
				start_btn.enabled = false;
				ip.enabled = false;
				port.enabled = false;
				
				inits();
			}
			
			private function inits():void {
				if(!socket){
					socket = new ServerSocket();
					socket.addEventListener(ServerSocketConnectEvent.CONNECT, onClienConnected);
					try{
						socket.bind(int(port.text), ip.text);
					}catch(e:*){
						cout.text += "\nSocket Bind Error!\n";
					}
					try{
						socket.listen();
					}catch(e:*){
						cout.text += "\nSocket listen Error\n";
					}
				}
			}
			
			private function onClienConnected(event:ServerSocketConnectEvent):void {
				var _clien:Socket = event.socket;
				_clien.endian = Endian.LITTLE_ENDIAN;
				_clien.addEventListener(ProgressEvent.SOCKET_DATA, onClienData);
				_clien.addEventListener(Event.CLOSE, onClientClose);
			}
			
			private function onClientClose(event:Event):void {
				event.currentTarget.addEventListener(ProgressEvent.SOCKET_DATA, onClienData);
				event.currentTarget.addEventListener(Event.CLOSE, onClientClose);
			}
			
			private function coutStr(str:String):void{
				cout.text += str;
			}
			
			////////////////////////////
			
			/**发送给客户端格式化好的数据(4位长度的包头+包体VO对象)*/
			private function writeFormatData($client:Socket, $VO:Message):Socket{
				var body_byte:CustomerByteArray = new CustomerByteArray();
				//body_byte.writeObject($VO);
				$VO.writeToDataOutput(body_byte);
				
				var cmd:int = $VO.toCmd();
				
				$client.writeInt(body_byte.length+4);
				$client.writeInt(cmd);
				$client.writeBytes(body_byte, 0, body_byte.length);
				//$client.writeObject($VO);
				return $client;
			}
			
			private var cmd:int = 0;
			private var offestLen:int = 0;
			/**接收服务端的数据，并解析包头+包体*/
			private function onClienData(event:ProgressEvent):void {
				var _clien:Socket = event.currentTarget as Socket;
				//数据长度要超过4位(int型的二进制占位长度)，才可以得到完成的包头
				coutStr("轮询长度:"+_clien.bytesAvailable+"\n");
				
				if (_clien.bytesAvailable < 4) return;
				//解析包头可得知，SOCKET要接收多少长度的数据来做为包体
				if(offestLen == 0){
					offestLen = _clien.readInt();
					coutStr("总长度:"+offestLen+"\n");
				}
				
				//得到包体
				if (_clien.bytesAvailable < offestLen) return;
				coutStr("\n得到包体:\n");
				offestLen = 0;
				//解析包头的协义号
				if(cmd == 0){
					cmd = _clien.readInt();
					coutStr("协义号:"+cmd+"\n");
				}
				//position = 8 因为读过包头了
				var _byte:ByteArray = new ByteArray();
				//读包体二进制
				_clien.readBytes(_byte);
				trace("Server收到包体:");
				for(var i:int = 0 ; i < _byte.length; i++){
					trace(_byte[i]);
				}
				//解析包体
				_byte.position = 0;
				var _obj:Object = _byte.readObject();
				for(var _name:String in _obj){
					cout.text += _name + " = " + _obj[_name] + "\n";
				}
				cout.text += "-----------------";
				
				//发送客户端数据
				var _uvo:UserVO = new UserVO();
				//_uvo.desc = new UserVO.type;
				writeFormatData(_clien, _uvo).flush();
				cmd = 0;
			}
			
			
			
			//////////////////////////
			
			
			
		]]>
	</fx:Script>
	
	<s:Button id="start_btn" x="213" y="16" label="开启" click="button1_clickHandler(event)"/>
	<s:TextInput id="ip" x="17" y="15" text="127.0.0.1"/>
	<s:TextInput id="port" x="157" y="15" width="50" text="20001"/>
	<s:Label x="149" y="19" fontSize="14" fontWeight="bold" text=":"/>
	<s:TextArea id="cout" x="17" y="45" width="266" height="152"/>
</s:WindowedApplication>
